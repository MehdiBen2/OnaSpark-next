datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum for different user roles
enum UserRole {
  ADMIN
  DG_EMPLOYEE
  ZONE_EMPLOYEE
  UNIT_EMPLOYEE
  STANDARD_USER
}

// Enum for account status
enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

// Department model to represent organizational departments
model Department {
  id            String    @id @default(cuid())
  name          String
  description   String?
  users         User[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Zone model representing different geographical or administrative zones
model Zone {
  id            String    @id @default(cuid())
  name          String
  code          String    @unique
  description   String?
  units         Unit[]
  users         User[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Unit model representing specific units within a zone
model Unit {
  id            String    @id @default(cuid())
  name          String
  code          String    @unique
  description   String?
  zoneId        String
  zone          Zone      @relation(fields: [zoneId], references: [id])
  users         User[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// User model with comprehensive role and permission management
model User {
  id            String        @id @default(cuid())
  email         String        @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole
  status        AccountStatus @default(ACTIVE)
  
  // Department association (optional)
  departmentId  String?
  department    Department?   @relation(fields: [departmentId], references: [id])
  
  // Zone and Unit associations based on role
  zoneId        String?
  zone          Zone?         @relation(fields: [zoneId], references: [id])
  
  unitId        String?
  unit          Unit?         @relation(fields: [unitId], references: [id])
  
  // Additional user metadata
  lastLogin     DateTime?
  profileImage  String?
  
  // Audit fields
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relation to user sessions or tokens if needed
  sessions      Session[]
}

// Session model for managing user sessions
model Session {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  token         String    @unique
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
}

// Permissions model for fine-grained access control
model Permission {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  category      String
  
  // You can expand this to create role-based or user-specific permissions
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Logging model for tracking user activities
model AuditLog {
  id            String    @id @default(cuid())
  userId        String
  action        String
  description   String
  ipAddress     String?
  timestamp     DateTime  @default(now())
}
