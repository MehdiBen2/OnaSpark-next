datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  engineType    = "library"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

// Comprehensive User Roles
enum UserRole {
  ADMIN
  DG_EMPLOYEE
  ZONE_EMPLOYEE
  UNIT_EMPLOYEE
  STANDARD_USER
}

// Department Model
model Department {
  id            String    @id @default(cuid())
  name          String    @unique
  code          String    @unique
  description   String?
  users         User[]
  incidents     IncidentPhysique[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Zone Model
model Zone {
  id            String    @id @default(cuid())
  name          String    @unique
  code          String    @unique
  description   String?
  units         Unit[]
  users         User[]
  centres       Centre[]
  incidents     IncidentPhysique[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Unit Model
model Unit {
  id            String    @id @default(cuid())
  name          String    @unique
  code          String    @unique
  description   String?
  zoneId        String
  zone          Zone      @relation(fields: [zoneId], references: [id])
  centres       Centre[]
  users         User[]
  incidents     IncidentPhysique[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Centre Model
model Centre {
  id            String    @id @default(cuid())
  name          String    @unique
  code          String    @unique
  description   String?
  zoneId        String
  zone          Zone      @relation(fields: [zoneId], references: [id])
  unitId        String
  unit          Unit      @relation(fields: [unitId], references: [id])
  incidents     IncidentPhysique[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Users Table with Comprehensive Access Control
model User {
  id            String    @id @default(cuid())
  
  // Identification
  username      String    @unique
  displayName   String
  passwordHash  String
  
  // Role and Access Control
  role          UserRole
  
  // Department Association
  departmentId  String?
  department    Department?  @relation(fields: [departmentId], references: [id])
  
  // Zone and Unit Access Control
  zoneId        String?
  zone          Zone?        @relation(fields: [zoneId], references: [id])
  
  unitId        String?
  unit          Unit?        @relation(fields: [unitId], references: [id])
  
  // User Management
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  
  // Audit Trails
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  incidents     IncidentPhysique[]
}

// Incidents Physique Table
model IncidentPhysique {
  id              String    @id @default(cuid())
  
  title           String
  wilaya          String
  commune         String
  localite        String?
  latitude        Float?
  longitude       Float?
  
  natureCause     String
  structureType   String?
  stepType        String
  
  dateIncident    DateTime
  dateResolution  DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  status          IncidentStatus  @default(PENDING)
  gravite         IncidentGravity
  impact          String?
  isValid         Boolean         @default(false)
  
  mesuresPrises   String?
  resolutionNotes String?
  
  drawnShapes     String?
  
  user            User?     @relation(fields: [userId], references: [id])
  userId          String?
  
  unit            Unit?     @relation(fields: [unitId], references: [id])
  unitId          String?
  
  zone            Zone?     @relation(fields: [zoneId], references: [id])
  zoneId          String?
  
  department      Department? @relation(fields: [departmentId], references: [id])
  departmentId    String?
  
  centre          Centre?    @relation(fields: [centreId], references: [id])
  centreId        String?
}

// Existing Enums
enum IncidentStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

enum IncidentGravity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
