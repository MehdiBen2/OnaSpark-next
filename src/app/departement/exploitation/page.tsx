'use client'

import React from 'react'
import { motion } from 'framer-motion'
import Image from 'next/image'
import Link from 'next/link'
import { 
  FileText, 
  Wrench, 
  LineChart, 
  Clock, 
  Clipboard, 
  Settings,
  TrendingUp,
  AlertTriangle,
  Server,
  Database,
  Activity,
  BarChart2,
  Layers,
  ArrowRight,
  LayoutGrid,
  Map,
  Workflow,
  Truck,
  Package,
  Grid,
  Shield,
  Droplet,
  Construction
} from 'lucide-react'

type ColorConfig = {
  bgColor: string
  textColor: string
  gradientFrom: string
  gradientTo: string
}

const COLOR_CONFIGS: Record<string, ColorConfig> = {
  rapports: {
    bgColor: 'bg-indigo-50',
    textColor: 'text-indigo-600',
    gradientFrom: 'from-indigo-500',
    gradientTo: 'to-indigo-600'
  },
  maintenance: {
    bgColor: 'bg-emerald-50',
    textColor: 'text-emerald-600',
    gradientFrom: 'from-emerald-500',
    gradientTo: 'to-emerald-600'
  },
  logistique: {
    bgColor: 'bg-amber-50',
    textColor: 'text-amber-600',
    gradientFrom: 'from-amber-500',
    gradientTo: 'to-amber-600'
  },
  securite: {
    bgColor: 'bg-rose-50',
    textColor: 'text-rose-600',
    gradientFrom: 'from-rose-500',
    gradientTo: 'to-rose-600'
  },
  qualiteEau: {
    bgColor: 'bg-sky-50',
    textColor: 'text-sky-600',
    gradientFrom: 'from-sky-500',
    gradientTo: 'to-sky-600'
  }
}

const exploitationSections = [
  {
    title: 'Rapports',
    description: 'Analyse et documentation détaillée des opérations et activités',
    icon: FileText,
    color: 'from-indigo-500 to-indigo-600',
    subItems: [{ value: '12 rapports disponibles' }],
    href: '/departement/exploitation/rapports'
  },
  {
    title: 'Maintenance',
    description: 'Gestion proactive des équipements et infrastructures critiques',
    icon: Wrench,
    color: 'from-emerald-500 to-emerald-600',
    subItems: [{ value: '12 interventions en cours' }],
    href: '/departement/exploitation/maintenance'
  },
  {
    title: 'Logistique',
    description: 'Coordination et suivi optimal des ressources et déplacements',
    icon: Truck,
    color: 'from-amber-500 to-amber-600',
    subItems: [{ value: '5 véhicules en mission' }],
    href: '/departement/exploitation/ressources'
  },
  {
    title: 'Sécurité',
    description: 'Surveillance et prévention proactive des risques opérationnels',
    icon: Shield,
    color: 'from-rose-500 to-rose-600',
    subItems: [{ value: '3 alertes de sécurité' }],
    href: '/departement/exploitation/infrastructures'
  },
  {
    title: 'Qualité de l\'Eau',
    description: 'Contrôle et analyse continue de la qualité et de la pureté de l\'eau',
    icon: Droplet,
    color: 'from-sky-500 to-sky-600',
    subItems: [{ value: '8 points de contrôle' }],
    href: '/departement/exploitation/qualite-eau'
  }
]

const AnimatedBalls = () => {
  const ballVariants = {
    initial: { 
      opacity: 0, 
      scale: 0.5,
      rotate: -30,
      x: 100,
      y: -50 
    },
    animate: (i: number) => ({
      opacity: 0.8,
      scale: 1,
      rotate: 0,
      x: 0,
      y: 0,
      transition: {
        delay: i * 0.2,
        type: "spring",
        stiffness: 100,
        damping: 10,
      }
    }),
    hover: {
      scale: 1.1,
      rotate: 5,
      transition: {
        type: "spring",
        stiffness: 300,
      }
    }
  }

  const ballColors = [
    "bg-[#c5d301]/50 backdrop-blur-md",
    "bg-[#1e7ec2]/50 backdrop-blur-md",
    "bg-[#cae7f0]/50 backdrop-blur-md"
  ]

  return (
    <div className="absolute top-0 right-0 w-full h-full overflow-hidden pointer-events-none">
      {ballColors.map((color, index) => (
        <motion.div
          key={index}
          className={`absolute w-72 h-72 rounded-full ${color}`}
          style={{
            top: `${-50 + index * 180}px`,
            right: `${-150 + index * 180}px`,
          }}
          variants={ballVariants}
          initial="initial"
          animate="animate"
          whileHover="hover"
          custom={index}
        />
      ))}
    </div>
  )
}

const ExploitationCard = ({ 
  title, 
  description, 
  icon: Icon, 
  color, 
  subItems, 
  href 
}) => {
  const colorKey = title.toLowerCase()
    .replace(/\s+/g, '')
    .replace("'", '') as keyof typeof COLOR_CONFIGS

  const colorConfig = COLOR_CONFIGS[colorKey] || COLOR_CONFIGS.rapports

  return (
    <Link 
      href={href} 
      className="group relative block transform transition-all duration-300 hover:-translate-y-2"
      aria-label={`Voir les détails de ${title}`}
    >
      <div className={`absolute -inset-0.5 bg-gradient-to-r ${colorConfig.gradientFrom} ${colorConfig.gradientTo} rounded-2xl opacity-0 group-hover:opacity-50 transition-opacity duration-300 blur-sm`}></div>
      
      <div className="relative bg-white p-6 rounded-2xl shadow-xl ring-1 ring-gray-900/5 space-y-5">
        <div className="flex items-center justify-between">
          <div className={`p-3 rounded-xl ${colorConfig.bgColor} ${colorConfig.textColor} bg-opacity-10`}>
            <Icon 
              size={28} 
              className={`${colorConfig.textColor} opacity-80`} 
            />
          </div>
          
          <div className="flex items-center space-x-2">
            <span className="text-xs font-medium text-gray-500">
              {subItems[0].value}
            </span>
            <div className="w-2 h-2 rounded-full bg-green-500 animate-pulse"></div>
          </div>
        </div>
        
        <div className="space-y-3">
          <h3 className={`text-xl font-bold text-gray-900 group-hover:${colorConfig.textColor} transition-colors`}>
            {title}
          </h3>
          
          <p className="text-sm text-gray-600 line-clamp-2">
            {description}
          </p>
        </div>
        
        <div className="flex items-center justify-between pt-4 border-t border-gray-100">
          <div className="flex items-center space-x-2">
            <Clock className="w-4 h-4 text-gray-400" />
            <span className="text-xs text-gray-500">Mis à jour récemment</span>
          </div>
          
          <div className={`flex items-center ${colorConfig.textColor} font-semibold text-sm group-hover:opacity-80 transition-colors`}>
            Explorer
            <ArrowRight className="ml-1 w-4 h-4 group-hover:translate-x-1 transition-transform" />
          </div>
        </div>
      </div>
    </Link>
  )
}

const ExploitationBanner = () => {
  return (
    <div className="relative bg-gradient-to-br from-[#4a90e2] to-[#1a237e] text-white overflow-hidden shadow-2xl">
      {/* Animated Balls */}
      <AnimatedBalls />

      {/* Animated Background Elements */}
      <div className="absolute inset-0 opacity-20 overflow-hidden">
        <div className="absolute -top-20 -right-20 w-96 h-96 bg-white/10 rounded-full animate-pulse"></div>
        <div className="absolute -bottom-20 -left-20 w-96 h-96 bg-white/10 rounded-full animate-pulse animation-delay-2000"></div>
      </div>
      
      {/* Subtle Grid Overlay */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute inset-0 bg-gradient-to-br from-transparent via-white/5 to-transparent opacity-10"></div>
        <div className="absolute inset-0 opacity-5 bg-[linear-gradient(0deg,transparent_24%,rgba(255,255,255,0.05)_25%,rgba(255,255,255,0.05)_26%,transparent_27%,transparent_74%,rgba(255,255,255,0.05)_75%,rgba(255,255,255,0.05)_76%,transparent_77%,transparent)] bg-[length:4rem_4rem]"></div>
      </div>

      <div className="relative px-4 py-16 md:px-8 md:py-20 max-w-7xl mx-auto flex items-center justify-between min-h-[350px]">
        <div className="flex-1 text-center md:text-left relative z-10">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            <h2 className="text-4xl md:text-5xl font-black mb-4 bg-clip-text text-transparent bg-gradient-to-r from-white to-white/70 drop-shadow-lg">
              Exploitation et Maintenance
            </h2>
            
            <div className="flex items-center justify-center md:justify-start space-x-4 text-white/80">
              <Wrench className="w-6 h-6 opacity-70" />
              <p className="text-xl font-black tracking-wide">
                Supervision des opérations techniques
              </p>
            </div>
          </motion.div>
        </div>
        
        <div className="hidden md:block -mr-16">
          <Image 
            src="/images/onalogos/sparkLogofull.png" 
            alt="ONA Spark Logo" 
            width={350} 
            height={120} 
            className="max-w-[350px] opacity-90"
          />
        </div>
      </div>
    </div>
  )
}

export default function ExploitationPage() {
  return (
    <div className="min-h-screen bg-gray-50">
      <ExploitationBanner />
      
      <div 
        id="exploitation-list"
        className="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {exploitationSections.map((section, index) => (
            <motion.div
              key={section.title}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ 
                delay: index * 0.1,
                type: 'spring',
                stiffness: 100
              }}
            >
              <ExploitationCard {...section} />
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  )
}
