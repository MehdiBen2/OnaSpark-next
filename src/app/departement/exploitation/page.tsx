'use client'

import React from 'react'
import { motion } from 'framer-motion'
import Image from 'next/image'
import Link from 'next/link'
import { 
  FileText, 
  Wrench, 
  LineChart, 
  Clock, 
  Clipboard, 
  Settings,
  TrendingUp,
  AlertTriangle,
  Server,
  Database,
  Activity,
  BarChart2,
  Layers,
  ArrowRight,
  LayoutGrid,
  Map,
  Workflow,
  Truck,
  Package,
  Grid
} from 'lucide-react'

const exploitationSections = [
  {
    title: 'Rapports',
    description: 'Analyse et documentation des opérations',
    icon: FileText,
    color: 'from-blue-500 to-blue-600',
    subItems: [
      { name: 'Rapports', icon: Clipboard },
      { name: 'Statistiques', icon: LineChart },
      { name: 'Activités', icon: Activity }
    ],
    href: '/departement/exploitation/rapports'
  },
  {
    title: 'Maintenance',
    description: 'Gestion et suivi des équipements',
    icon: Wrench,
    color: 'from-green-500 to-green-600',
    subItems: [
      { name: 'Planification', icon: Clock },
      { name: 'Équipements', icon: Settings },
      { name: 'Historique', icon: Database }
    ],
    href: '/departement/exploitation/maintenance'
  },
  {
    title: 'Ressources',
    description: 'Gestion des stocks et logistique',
    icon: Truck,
    color: 'from-purple-500 to-purple-600',
    subItems: [
      { name: 'Stock', icon: Package },
      { name: 'Logistique', icon: Workflow },
      { name: 'Inventaire', icon: Grid }
    ],
    href: '/departement/exploitation/ressources'
  },
  {
    title: 'Infrastructures',
    description: 'Cartographie et stations de traitement',
    icon: Map,
    color: 'from-teal-500 to-teal-600',
    subItems: [
      { name: 'Cartographie', icon: Map },
      { name: 'Stations de Traitement', icon: Server },
      { name: 'Stations de Pompage', icon: TrendingUp }
    ],
    href: '/departement/exploitation/infrastructures'
  }
]

const AnimatedBalls = () => {
  const ballVariants = {
    initial: { 
      opacity: 0, 
      scale: 0.5,
      rotate: -30,
      x: 100,
      y: -50 
    },
    animate: (i: number) => ({
      opacity: 0.8,
      scale: 1,
      rotate: 0,
      x: 0,
      y: 0,
      transition: {
        delay: i * 0.2,
        type: "spring",
        stiffness: 100,
        damping: 10,
      }
    }),
    hover: {
      scale: 1.1,
      rotate: 5,
      transition: {
        type: "spring",
        stiffness: 300,
      }
    }
  }

  const ballColors = [
    "bg-[#c5d301]/50 backdrop-blur-md",
    "bg-[#1e7ec2]/50 backdrop-blur-md",
    "bg-[#cae7f0]/50 backdrop-blur-md"
  ]

  return (
    <div className="absolute top-0 right-0 w-full h-full overflow-hidden pointer-events-none">
      {ballColors.map((color, index) => (
        <motion.div
          key={index}
          className={`absolute w-72 h-72 rounded-full ${color}`}
          style={{
            top: `${-50 + index * 180}px`,
            right: `${-150 + index * 180}px`,
          }}
          variants={ballVariants}
          initial="initial"
          animate="animate"
          whileHover="hover"
          custom={index}
        />
      ))}
    </div>
  )
}

const ExploitationCard = ({ title, description, icon: Icon, color, subItems, href }) => {
  return (
    <Link href={href} className="group">
      <motion.div 
        className="flex flex-col h-full rounded-2xl border border-gray-200 bg-white shadow-lg overflow-hidden transition-all duration-300 hover:shadow-xl hover:border-blue-200 hover:ring-4 hover:ring-blue-100/50"
        whileHover={{ y: -10, scale: 1.02 }}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <div className="relative p-6 flex-grow">
          <div className="flex items-center justify-between mb-4">
            <div className={`p-3 rounded-xl bg-gradient-to-br ${color} text-white shadow-md`}>
              <Icon size={28} />
            </div>
            <div className="text-sm font-medium text-gray-500 flex items-center space-x-1 opacity-70 group-hover:opacity-100 transition-opacity">
              <span>Détails</span>
              <ArrowRight className="w-4 h-4" />
            </div>
          </div>
          
          <h3 className="text-2xl font-semibold text-gray-800 mb-3 group-hover:text-blue-600 transition-colors">
            {title}
          </h3>
          <p className="text-sm text-gray-600 mb-4 line-clamp-2 min-h-[42px]">
            {description}
          </p>
          
          <div className="grid grid-cols-2 gap-2 mt-auto">
            {subItems.map((item, index) => {
              const ItemIcon = item.icon
              return (
                <div 
                  key={index}
                  className="flex items-center space-x-2 bg-gray-100 rounded-lg px-3 py-2 text-xs text-gray-700 group-hover:bg-blue-50 transition-colors"
                >
                  <ItemIcon size={14} className="text-gray-500 group-hover:text-blue-600" />
                  <span className="truncate">{item.name}</span>
                </div>
              )
            })}
          </div>
        </div>
        
        <div className="h-1 w-full bg-gradient-to-r from-blue-500 to-blue-300 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
      </motion.div>
    </Link>
  )
}

const ExploitationBanner = () => {
  return (
    <div className="relative bg-gradient-to-br from-[#4a90e2] to-[#1a237e] text-white overflow-hidden shadow-2xl">
      {/* Animated Balls */}
      <AnimatedBalls />

      {/* Animated Background Elements */}
      <div className="absolute inset-0 opacity-20 overflow-hidden">
        <div className="absolute -top-20 -right-20 w-96 h-96 bg-white/10 rounded-full animate-pulse"></div>
        <div className="absolute -bottom-20 -left-20 w-96 h-96 bg-white/10 rounded-full animate-pulse animation-delay-2000"></div>
      </div>
      
      {/* Subtle Grid Overlay */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute inset-0 bg-gradient-to-br from-transparent via-white/5 to-transparent opacity-10"></div>
        <div className="absolute inset-0 opacity-5 bg-[linear-gradient(0deg,transparent_24%,rgba(255,255,255,0.05)_25%,rgba(255,255,255,0.05)_26%,transparent_27%,transparent_74%,rgba(255,255,255,0.05)_75%,rgba(255,255,255,0.05)_76%,transparent_77%,transparent)] bg-[length:4rem_4rem]"></div>
      </div>

      <div className="relative px-4 py-16 md:px-8 md:py-20 max-w-7xl mx-auto flex items-center justify-between min-h-[350px]">
        <div className="flex-1 text-center md:text-left relative z-10">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            <h2 className="text-4xl md:text-5xl font-black mb-4 bg-clip-text text-transparent bg-gradient-to-r from-white to-white/70 drop-shadow-lg">
              Exploitation et Maintenance
            </h2>
            
            <div className="flex items-center justify-center md:justify-start space-x-4 text-white/80">
              <Wrench className="w-6 h-6 opacity-70" />
              <p className="text-xl font-black tracking-wide">
                Supervision des opérations techniques
              </p>
            </div>
          </motion.div>
        </div>
        
        <div className="hidden md:block -mr-16">
          <Image 
            src="/images/onalogos/sparkLogofull.png" 
            alt="ONA Spark Logo" 
            width={350} 
            height={120} 
            className="max-w-[350px] opacity-90"
          />
        </div>
      </div>
    </div>
  )
}

export default function ExploitationPage() {
  return (
    <div className="min-h-screen bg-gray-50">
      <ExploitationBanner />
      
      <div 
        id="exploitation-list"
        className="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8"
      >
        <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-4">
          {exploitationSections.map((section, index) => (
            <motion.div
              key={section.title}
              className="flex"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ 
                delay: index * 0.1,
                type: 'spring',
                stiffness: 100
              }}
            >
              <ExploitationCard {...section} />
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  )
}
