'use client'

import React, { useState, useEffect } from 'react'
import { UnitService } from '@/lib/services/unit.service'
import { ZoneService } from '@/lib/services/zone.service'
import { Button } from '@/components/ui/button'
import { Plus, Edit, Trash2 } from 'lucide-react'
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from '@/components/ui/table'
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogTrigger 
} from '@/components/ui/dialog'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select'
import { toast } from 'sonner'
import { z } from 'zod'
import { useForm, Controller } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'

// Form validation schema
const UnitFormSchema = z.object({
  name: z.string().min(2, 'Le nom de l\'unité doit contenir au moins 2 caractères'),
  code: z.string().min(2, 'Le code de l\'unité doit contenir au moins 2 caractères'),
  description: z.string().optional(),
  zoneId: z.string({ required_error: 'La zone est requise' })
})

export default function UnitesPage() {
  const [units, setUnits] = useState([])
  const [zones, setZones] = useState([])
  const [isLoading, setIsLoading] = useState(true)
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [editingUnit, setEditingUnit] = useState(null)

  const {
    register,
    handleSubmit,
    control,
    reset,
    formState: { errors }
  } = useForm({
    resolver: zodResolver(UnitFormSchema),
    defaultValues: {
      name: '',
      code: '',
      description: '',
      zoneId: ''
    }
  })

  const fetchData = async () => {
    try {
      const [unitsResult, zonesResult] = await Promise.all([
        UnitService.getUnits(),
        ZoneService.getZones()
      ])
      setUnits(unitsResult.units)
      setZones(zonesResult.zones)
      setIsLoading(false)
    } catch (error) {
      toast.error('Erreur lors du chargement des données')
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchData()
  }, [])

  const onSubmit = async (data) => {
    try {
      if (editingUnit) {
        // Update existing unit
        await UnitService.updateUnit(editingUnit.id, data)
        toast.success('Unité mise à jour avec succès')
      } else {
        // Create new unit
        await UnitService.createUnit(data)
        toast.success('Unité créée avec succès')
      }
      
      fetchData()
      setIsDialogOpen(false)
      reset()
      setEditingUnit(null)
    } catch (error) {
      toast.error(`Erreur lors de ${editingUnit ? 'la mise à jour' : 'la création'} de l'unité`)
    }
  }

  const handleDeleteUnit = async (id: string) => {
    try {
      await UnitService.deleteUnit(id)
      toast.success('Unité supprimée avec succès')
      fetchData()
    } catch (error) {
      toast.error('Erreur lors de la suppression de l\'unité')
    }
  }

  const openEditDialog = (unit) => {
    setEditingUnit(unit)
    reset({
      name: unit.name,
      code: unit.code,
      description: unit.description || '',
      zoneId: unit.zoneId
    })
    setIsDialogOpen(true)
  }

  const openCreateDialog = () => {
    reset()
    setEditingUnit(null)
    setIsDialogOpen(true)
  }

  return (
    <div className="container mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Gestion des Unités</h1>
        <Button onClick={openCreateDialog}>
          <Plus className="mr-2" /> Nouvelle Unité
        </Button>
      </div>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {editingUnit ? 'Modifier l\'Unité' : 'Créer une Nouvelle Unité'}
            </DialogTitle>
          </DialogHeader>
          
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <div>
              <Label htmlFor="name">Nom de l'Unité *</Label>
              <Input 
                {...register('name')}
                placeholder="Entrez le nom de l'unité"
                className={errors.name ? 'border-red-500' : ''}
              />
              {errors.name && (
                <p className="text-sm text-red-500">{errors.name.message}</p>
              )}
            </div>

            <div>
              <Label htmlFor="code">Code de l'Unité *</Label>
              <Input 
                {...register('code')}
                placeholder="Entrez le code de l'unité"
                className={errors.code ? 'border-red-500' : ''}
              />
              {errors.code && (
                <p className="text-sm text-red-500">{errors.code.message}</p>
              )}
            </div>

            <div>
              <Label htmlFor="description">Description</Label>
              <Input 
                {...register('description')}
                placeholder="Description optionnelle"
              />
            </div>

            <div>
              <Label htmlFor="zoneId">Zone *</Label>
              <Controller
                name="zoneId"
                control={control}
                render={({ field }) => (
                  <Select 
                    onValueChange={field.onChange} 
                    value={field.value}
                  >
                    <SelectTrigger 
                      className={errors.zoneId ? 'border-red-500' : ''}
                    >
                      <SelectValue placeholder="Sélectionnez une zone" />
                    </SelectTrigger>
                    <SelectContent>
                      {zones.map(zone => (
                        <SelectItem key={zone.id} value={zone.id}>
                          {zone.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                )}
              />
              {errors.zoneId && (
                <p className="text-sm text-red-500">{errors.zoneId.message}</p>
              )}
            </div>

            <div className="flex justify-end space-x-2">
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => setIsDialogOpen(false)}
              >
                Annuler
              </Button>
              <Button type="submit">
                {editingUnit ? 'Mettre à jour' : 'Créer'}
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {isLoading ? (
        <p>Chargement des unités...</p>
      ) : (
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Nom</TableHead>
              <TableHead>Code</TableHead>
              <TableHead>Zone</TableHead>
              <TableHead>Description</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {units.map(unit => (
              <TableRow key={unit.id}>
                <TableCell>{unit.name}</TableCell>
                <TableCell>{unit.code}</TableCell>
                <TableCell>{unit.zone?.name || 'N/A'}</TableCell>
                <TableCell>{unit.description || 'N/A'}</TableCell>
                <TableCell>
                  <div className="flex space-x-2">
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => openEditDialog(unit)}
                    >
                      <Edit className="w-4 h-4 mr-2" /> Modifier
                    </Button>
                    <Button 
                      variant="destructive" 
                      size="sm"
                      onClick={() => handleDeleteUnit(unit.id)}
                    >
                      <Trash2 className="w-4 h-4 mr-2" /> Supprimer
                    </Button>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
    </div>
  )
}
