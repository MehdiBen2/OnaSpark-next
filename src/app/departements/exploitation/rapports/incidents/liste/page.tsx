'use client'

import React, { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { AlertTriangle, Plus, ChevronLeft, ChevronRight } from 'lucide-react'
import Link from 'next/link'
import Image from 'next/image'
import { Button } from "@/components/ui/button"
import { Input } from '@/components/ui/input'
import { Select } from '@/components/ui/select'
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table"
import { Badge as NewBadge } from '@/components/ui/badge'
import { getIncidents } from './actions'
import { IncidentStatus, IncidentGravity } from '@prisma/client'

type Incident = {
  id: string
  titre: string
  unite: string
  dateHeure: string
  niveauGravite: IncidentGravity
  status: IncidentStatus
}

function IncidentsListBanner () {
  // TODO: Replace with actual user context or authentication state
  const [user, setUser] = useState({
    role: 'admin', // or 'user'
    unit: 'Unité Technique' // or null for users without a specific unit
  })

  const getIncidentSubtitle = () => {
    if (user.role === 'admin' || !user.unit) {
      return 'Vous visualisez les incidents de vos structures'
    }
    return `Les incidents de l'unité ${user.unit}`
  }

  return (
    <div className="relative bg-gradient-to-br from-[#4a90e2] to-[#1a237e] text-white overflow-hidden shadow-2xl">
      {/* Red gradient overlay */}
      <div 
        className="absolute top-0 right-0 bottom-0 w-1/4 bg-gradient-to-r from-transparent to-red-600/50 opacity-70 pointer-events-none"
      />
      
      <div className="relative px-4 py-16 md:px-8 md:py-20 max-w-7xl mx-auto flex items-center justify-between min-h-[250px]">
        <div className="flex-1 text-center md:text-left relative z-10">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            <h2 className="text-4xl md:text-5xl font-black mb-4 bg-clip-text text-transparent bg-gradient-to-r from-white to-white/70 drop-shadow-lg">
              Liste des Incidents
            </h2>
            
            <div className="flex items-center justify-center md:justify-start space-x-4 text-white/80">
              <AlertTriangle className="w-6 h-6 opacity-70" />
              <p className="text-xl font-black tracking-wide">
                Suivi et Gestion des Incidents
                <span className="block text-sm mt-1 font-medium opacity-80">
                  {getIncidentSubtitle()}
                </span>
              </p>
            </div>
          </motion.div>
        </div>
        
        <div className="hidden md:block">
          <Image 
            src="/images/onalogos/sparkLogofull.png" 
            alt="ONA Spark Logo" 
            width={350} 
            height={120} 
            className="max-w-[350px] opacity-90"
          />
        </div>
      </div>
      
      <div className="absolute bottom-4 left-4 md:left-8">
        <Link href="/departements/exploitation/rapports">
          <Button 
            variant="outline" 
            className="bg-white/20 text-white hover:bg-white/30 border-white/30"
          >
            <ChevronLeft className="w-5 h-5 mr-2" />
            Retourner aux Rapports
          </Button>
        </Link>
      </div>
    </div>
  )
}

export default function IncidentsListPage () {
  const [currentPage, setCurrentPage] = useState(1)
  const [incidents, setIncidents] = useState<Incident[]>([])
  const [totalPages, setTotalPages] = useState(1)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [filters, setFilters] = useState({
    status: '',
    gravite: '',
    search: ''
  })

  const fetchIncidents = async (page: number) => {
    setIsLoading(true)
    setError(null)
    try {
      const result = await getIncidents({
        page,
        pageSize: 10,
        status: filters.status || undefined,
        gravite: filters.gravite || undefined,
      })
      
      // Safely handle empty results
      setIncidents(result.items || [])
      setTotalPages(result.total > 0 ? Math.ceil(result.total / 10) : 1)
    } catch (err) {
      setError('Impossible de charger les incidents')
      console.error(err)
      setIncidents([])
      setTotalPages(1)
    } finally {
      setIsLoading(false)
    }
  }

  React.useEffect(() => {
    fetchIncidents(currentPage)
  }, [currentPage, filters])

  const handlePageChange = (newPage: number) => {
    if (newPage >= 1 && newPage <= totalPages) {
      setCurrentPage(newPage)
    }
  }

  const getStatusVariant = (status: IncidentStatus) => {
    switch (status) {
      case 'OUVERT': return 'secondary'
      case 'EN_COURS': return 'outline'
      case 'RESOLU': return 'success'
      case 'FERME': return 'default'
      default: return 'default'
    }
  }

  const getGravityVariant = (gravite: IncidentGravity) => {
    switch (gravite) {
      case 'FAIBLE': return 'secondary'
      case 'MOYENNE': return 'warning'
      case 'ELEVEE': return 'destructive'
      case 'CRITIQUE': return 'destructive'
      default: return 'default'
    }
  }

  const renderContent = () => {
    if (isLoading) {
      return (
        <div className="flex justify-center items-center h-64">
          <span>Chargement des incidents...</span>
        </div>
      )
    }

    if (error) {
      return (
        <div className="bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded relative" role="alert">
          <AlertTriangle className="w-5 h-5 inline-block mr-2" />
          {error}
        </div>
      )
    }

    if (incidents.length === 0) {
      return (
        <div className="flex flex-col items-center justify-center h-64 text-gray-500">
          <AlertTriangle className="w-12 h-12 mb-4" />
          <p>Aucun incident trouvé</p>
          <p className="text-sm mt-2">Essayez de modifier vos filtres</p>
        </div>
      )
    }

    return (
      <>
        <div className="bg-white shadow rounded-lg overflow-hidden">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Titre</TableHead>
                <TableHead>Unité</TableHead>
                <TableHead>Date & Heure</TableHead>
                <TableHead>Niveau de Gravité</TableHead>
                <TableHead>Statut</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {incidents.map((incident) => (
                <TableRow key={incident.id}>
                  <TableCell>{incident.titre}</TableCell>
                  <TableCell>{incident.unite}</TableCell>
                  <TableCell>{incident.dateHeure}</TableCell>
                  <TableCell>
                    <NewBadge variant={getGravityVariant(incident.niveauGravite)}>
                      {incident.niveauGravite}
                    </NewBadge>
                  </TableCell>
                  <TableCell>
                    <NewBadge variant={getStatusVariant(incident.status)}>
                      {incident.status}
                    </NewBadge>
                  </TableCell>
                  <TableCell>
                    <Link href={`/departements/exploitation/rapports/incidents/${incident.id}`}>
                      <Button variant="outline" size="sm">
                        Détails
                      </Button>
                    </Link>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>

        <div className="mt-4 flex items-center justify-center gap-2">
          <Button
            variant="outline"
            size="icon"
            onClick={() => handlePageChange(currentPage - 1)}
            disabled={currentPage === 1}
          >
            <ChevronLeft className="h-4 w-4" />
          </Button>
          <span className="mx-4">
            Page {currentPage} sur {totalPages}
          </span>
          <Button
            variant="outline"
            size="icon"
            onClick={() => handlePageChange(currentPage + 1)}
            disabled={currentPage === totalPages}
          >
            <ChevronRight className="h-4 w-4" />
          </Button>
        </div>
      </>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50/50">
      <IncidentsListBanner />
      
      <div className="max-w-7xl mx-auto px-4 py-8 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center mb-6">
          <h3 className="text-2xl font-bold text-gray-900">
            Incidents Signalés
          </h3>
          
          <Link href="/departements/exploitation/rapports/incidents">
            <Button variant="outline" className="flex items-center space-x-2">
              <Plus className="w-5 h-5" />
              <span>Nouveau Incident</span>
            </Button>
          </Link>
        </div>

        <div className="mb-6 flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
          <div className="flex flex-1 gap-4">
            <Input
              placeholder="Rechercher..."
              value={filters.search}
              onChange={(e) => setFilters({ ...filters, search: e.target.value })}
              className="max-w-xs"
            />
            <Select
              value={filters.status}
              onValueChange={(value) => setFilters({ ...filters, status: value })}
            >
              <option value="">Tous les statuts</option>
              <option value="OUVERT">Ouvert</option>
              <option value="EN_COURS">En cours</option>
              <option value="RESOLU">Résolu</option>
              <option value="FERME">Fermé</option>
            </Select>
            <Select
              value={filters.gravite}
              onValueChange={(value) => setFilters({ ...filters, gravite: value })}
            >
              <option value="">Toutes les gravités</option>
              <option value="FAIBLE">Faible</option>
              <option value="MOYENNE">Moyenne</option>
              <option value="ELEVEE">Élevée</option>
              <option value="CRITIQUE">Critique</option>
            </Select>
          </div>
        </div>

        {renderContent()}
      </div>
    </div>
  )
}
