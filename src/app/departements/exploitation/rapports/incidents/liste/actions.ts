'use server'

import { PrismaClient } from '@prisma/client'
import { cache } from 'react'

// Cached and memoized Prisma client to prevent multiple instantiations
const getPrismaClient = cache(() => new PrismaClient())

type GetIncidentsParams = {
  page?: number
  pageSize?: number
  status?: string
  gravite?: string
}

export async function getIncidents({
  page = 1, 
  pageSize = 10, 
  status, 
  gravite 
}: GetIncidentsParams = {}) {
  const prisma = getPrismaClient()

  try {
    const where = {
      ...(status && { status }),
      ...(gravite && { niveauGravite: gravite })
    }

    // Ensure safe counting and fetching
    const [total, items] = await Promise.all([
      prisma.incident.count({ where }),
      prisma.incident.findMany({
        where,
        skip: (page - 1) * pageSize,
        take: pageSize,
        orderBy: {
          dateHeure: 'desc'
        }
      })
    ])

    return {
      items: items || [],
      total: total || 0,
      page,
      pageSize
    }
  } catch (error) {
    console.error('Error in getIncidents:', error)
    return {
      items: [],
      total: 0,
      page,
      pageSize
    }
  } finally {
    // In Next.js 15, Prisma client is managed differently
    // No need to manually disconnect
  }
}
