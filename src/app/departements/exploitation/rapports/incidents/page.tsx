'use client'

import React, { useState, useCallback } from 'react'
import { motion } from 'framer-motion'
import { ArrowLeft, FileText, Save, ChevronLeft } from 'lucide-react'
import Link from 'next/link'
import Image from 'next/image'
import { useRouter } from 'next/navigation'
import { toast } from 'sonner'
import { z } from 'zod'
import { IncidentGravity, IncidentStatus } from '@prisma/client'
import { IncidentService } from '@/lib/services/incident.service'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'

function IncidentsBanner() {
  return (
    <div className="w-full bg-gradient-to-br from-[#4a90e2] to-[#1a237e] text-white">
      <div className="relative px-4 py-16 md:px-8 md:py-20 max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="flex flex-col md:flex-row items-center justify-between"
        >
          <div className="text-center md:text-left mb-8 md:mb-0">
            <h2 className="text-4xl md:text-5xl font-black mb-4 bg-clip-text text-transparent bg-gradient-to-r from-white to-white/70 drop-shadow-lg">
              Signaler un Incident
            </h2>
            <div className="flex items-center justify-center md:justify-start space-x-4 text-white/80">
              <FileText className="w-6 h-6 opacity-70" />
              <p className="text-xl font-black tracking-wide">
                Rapport Détaillé d'Incident
              </p>
            </div>
          </div>
          
          <div className="hidden md:block">
            <Image 
              src="/images/onalogos/sparkLogofull.png" 
              alt="ONA Spark Logo" 
              width={350} 
              height={120} 
              className="max-w-[350px] opacity-90"
            />
          </div>
        </motion.div>

        <div className="absolute bottom-4 left-4 md:left-8">
          <Link href="/departements/exploitation/rapports/incidents/liste">
            <Button 
              variant="outline" 
              className="bg-white/20 text-white hover:bg-white/30 border-white/30"
            >
              <ArrowLeft className="w-5 h-5 mr-2" />
              Retour à la liste d'incidents
            </Button>
          </Link>
        </div>
      </div>
    </div>
  )
}

const formSchema = z.object({
  title: z.string().min(3, 'Le titre doit contenir au moins 3 caractères'),
  wilaya: z.string().min(2, 'La wilaya est requise'),
  commune: z.string().min(2, 'La commune est requise'),
  localite: z.string().optional(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  natureCause: z.string().min(3, 'La nature et la cause sont requises'),
  structureType: z.string().optional(),
  stepType: z.string().min(2, 'Le type d\'étape est requis'),
  dateIncident: z.string().transform(str => new Date(str)),
  status: z.nativeEnum(IncidentStatus).default(IncidentStatus.PENDING),
  gravite: z.nativeEnum(IncidentGravity),
  impact: z.string().optional(),
  mesuresPrises: z.string().optional(),
  resolutionNotes: z.string().optional(),
  userId: z.string().optional(),
  unitId: z.string().optional(),
  zoneId: z.string().optional(),
  departmentId: z.string().optional(),
  centreId: z.string().optional(),
  isValid: z.boolean().optional().default(true)
})

type FormData = z.infer<typeof formSchema>

export default function IncidentsPage() {
  const router = useRouter()
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    setValue,
    watch
  } = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      title: '',
      wilaya: '',
      commune: '',
      localite: '',
      latitude: undefined,
      longitude: undefined,
      natureCause: '',
      structureType: '',
      stepType: '',
      dateIncident: new Date().toISOString().split('T')[0],
      status: IncidentStatus.PENDING,
      gravite: IncidentGravity.LOW,
      impact: '',
      mesuresPrises: '',
      resolutionNotes: '',
      userId: '',
      unitId: '',
      zoneId: '',
      departmentId: '',
      centreId: '',
      isValid: true
    }
  })

  const onSubmit = async (data: FormData) => {
    try {
      await IncidentService.createIncident(data)
      
      toast.success('Incident enregistré avec succès')
      router.push('/departements/exploitation/rapports/incidents/liste')
    } catch (error) {
      console.error('Error creating incident:', error)
      toast.error('Erreur lors de l\'enregistrement de l\'incident')
    }
  }

  return (
    <div className="min-h-screen flex flex-col bg-gray-50 scrollbar-gutter-stable">
      <div className="fixed inset-0 overflow-y-scroll">
        <div className="relative min-h-full">
          <IncidentsBanner />
          
          <main className="relative w-full max-w-7xl mx-auto px-4 py-8">
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
              <div className="bg-white shadow-sm rounded-lg p-6">
                <h3 className="text-lg font-semibold mb-6">Informations de base</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="title">Titre de l'incident *</Label>
                    <Input
                      id="title"
                      placeholder="Entrer le titre"
                      className={`w-full bg-white text-black ${errors.title ? 'border-red-500' : ''}`}
                      {...register('title')}
                    />
                    {errors.title && (
                      <p className="text-sm text-red-500">{errors.title.message}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="wilaya">Wilaya *</Label>
                    <Input
                      id="wilaya"
                      placeholder="Entrer la wilaya"
                      className={`w-full bg-white text-black ${errors.wilaya ? 'border-red-500' : ''}`}
                      {...register('wilaya')}
                    />
                    {errors.wilaya && (
                      <p className="text-sm text-red-500">{errors.wilaya.message}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="commune">Commune *</Label>
                    <Input
                      id="commune"
                      placeholder="Entrer la commune"
                      className={`w-full bg-white text-black ${errors.commune ? 'border-red-500' : ''}`}
                      {...register('commune')}
                    />
                    {errors.commune && (
                      <p className="text-sm text-red-500">{errors.commune.message}</p>
                    )}
                  </div>

                  <div className="md:col-span-2 space-y-2">
                    <Label htmlFor="localite">Localité</Label>
                    <Input
                      id="localite"
                      placeholder="Entrer la localité"
                      className="w-full bg-white text-black"
                      {...register('localite')}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="latitude">Latitude</Label>
                    <Input
                      id="latitude"
                      type="number"
                      placeholder="Entrer la latitude"
                      className="w-full bg-white text-black"
                      {...register('latitude')}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="longitude">Longitude</Label>
                    <Input
                      id="longitude"
                      type="number"
                      placeholder="Entrer la longitude"
                      className="w-full bg-white text-black"
                      {...register('longitude')}
                    />
                  </div>

                  <div className="md:col-span-2 space-y-2">
                    <Label htmlFor="natureCause">Nature et Cause *</Label>
                    <Textarea
                      id="natureCause"
                      placeholder="Décrire la nature et la cause de l'incident"
                      className={`w-full bg-white text-black min-h-[100px] ${errors.natureCause ? 'border-red-500' : ''}`}
                      {...register('natureCause')}
                    />
                    {errors.natureCause && (
                      <p className="text-sm text-red-500">{errors.natureCause.message}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="structureType">Type de Structure</Label>
                    <Select 
                      onValueChange={(value) => setValue('structureType', value)}
                    >
                      <SelectTrigger 
                        id="structureType" 
                        className="w-full bg-white text-black"
                      >
                        <SelectValue placeholder="Sélectionner le type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="type1">Type 1</SelectItem>
                        <SelectItem value="type2">Type 2</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="stepType">Type d'étape *</Label>
                    <Input
                      id="stepType"
                      placeholder="Entrer le type d'étape"
                      className={`w-full bg-white text-black ${errors.stepType ? 'border-red-500' : ''}`}
                      {...register('stepType')}
                    />
                    {errors.stepType && (
                      <p className="text-sm text-red-500">{errors.stepType.message}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="dateIncident">Date et Heure *</Label>
                    <Input
                      id="dateIncident"
                      type="date"
                      className={`w-full bg-white text-black ${errors.dateIncident ? 'border-red-500' : ''}`}
                      {...register('dateIncident')}
                    />
                    {errors.dateIncident && (
                      <p className="text-sm text-red-500">{errors.dateIncident.message}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="status">Statut *</Label>
                    <Select 
                      onValueChange={(value) => setValue('status', value as IncidentStatus)}
                    >
                      <SelectTrigger 
                        id="status" 
                        className={`w-full bg-white text-black ${errors.status ? 'border-red-500' : ''}`}
                      >
                        <SelectValue placeholder="Sélectionner le statut" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value={IncidentStatus.PENDING}>En attente</SelectItem>
                        <SelectItem value={IncidentStatus.IN_PROGRESS}>En cours</SelectItem>
                        <SelectItem value={IncidentStatus.RESOLVED}>Résolu</SelectItem>
                      </SelectContent>
                    </Select>
                    {errors.status && (
                      <p className="text-sm text-red-500">{errors.status.message}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="gravite">Niveau de Gravité *</Label>
                    <Select 
                      onValueChange={(value) => setValue('gravite', value as IncidentGravity)}
                    >
                      <SelectTrigger 
                        id="gravite" 
                        className={`w-full bg-white text-black ${errors.gravite ? 'border-red-500' : ''}`}
                      >
                        <SelectValue placeholder="Sélectionner le niveau" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value={IncidentGravity.LOW}>Faible</SelectItem>
                        <SelectItem value={IncidentGravity.MEDIUM}>Moyen</SelectItem>
                        <SelectItem value={IncidentGravity.HIGH}>Élevé</SelectItem>
                        <SelectItem value={IncidentGravity.CRITICAL}>Critique</SelectItem>
                      </SelectContent>
                    </Select>
                    {errors.gravite && (
                      <p className="text-sm text-red-500">{errors.gravite.message}</p>
                    )}
                  </div>

                  <div className="md:col-span-2 space-y-2">
                    <Label htmlFor="impact">Impact</Label>
                    <Textarea
                      id="impact"
                      placeholder="Décrire l'impact de l'incident"
                      className="w-full bg-white text-black min-h-[100px]"
                      {...register('impact')}
                    />
                  </div>

                  <div className="md:col-span-2 space-y-2">
                    <Label htmlFor="mesuresPrises">Mesures Prises</Label>
                    <Textarea
                      id="mesuresPrises"
                      placeholder="Décrire les mesures prises"
                      className="w-full bg-white text-black min-h-[100px]"
                      {...register('mesuresPrises')}
                    />
                  </div>

                  <div className="md:col-span-2 space-y-2">
                    <Label htmlFor="resolutionNotes">Notes de résolution</Label>
                    <Textarea
                      id="resolutionNotes"
                      placeholder="Décrire les notes de résolution"
                      className="w-full bg-white text-black min-h-[100px]"
                      {...register('resolutionNotes')}
                    />
                  </div>
                </div>
              </div>

              <div className="fixed bottom-6 right-6 z-50">
                <Button
                  type="submit"
                  disabled={isSubmitting}
                  className="rounded-full h-16 px-10 text-lg font-semibold shadow-2xl transition-all duration-300 ease-in-out transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center text-white"
                  style={{
                    background: 'linear-gradient(145deg, #356ee7, #173aaa)',
                    boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)'
                  }}
                >
                  {isSubmitting ? (
                    <span className="flex items-center">
                      <svg className="animate-spin -ml-1 mr-3 h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Enregistrement...
                    </span>
                  ) : (
                    <>
                      <Save className="w-6 h-6 mr-3" />
                      Enregistrer l'incident
                    </>
                  )}
                </Button>
              </div>
            </form>
          </main>
        </div>
      </div>
    </div>
  )
}
