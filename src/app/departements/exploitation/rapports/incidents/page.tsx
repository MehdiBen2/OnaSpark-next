'use client'

import React, { useState, useCallback } from 'react'
import { motion } from 'framer-motion'
import { ArrowLeft, FileText, Save, ChevronLeft } from 'lucide-react'
import Link from 'next/link'
import Image from 'next/image'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"

function IncidentsBanner() {
  return (
    <div className="w-full bg-gradient-to-br from-[#4a90e2] to-[#1a237e] text-white">
      <div className="relative px-4 py-16 md:px-8 md:py-20 max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="flex flex-col md:flex-row items-center justify-between"
        >
          <div className="text-center md:text-left mb-8 md:mb-0">
            <h2 className="text-4xl md:text-5xl font-black mb-4 bg-clip-text text-transparent bg-gradient-to-r from-white to-white/70 drop-shadow-lg">
              Signaler un Incident
            </h2>
            <div className="flex items-center justify-center md:justify-start space-x-4 text-white/80">
              <FileText className="w-6 h-6 opacity-70" />
              <p className="text-xl font-black tracking-wide">
                Rapport Détaillé d'Incident
              </p>
            </div>
          </div>
          
          <div className="hidden md:block">
            <Image 
              src="/images/onalogos/sparkLogofull.png" 
              alt="ONA Spark Logo" 
              width={350} 
              height={120} 
              className="max-w-[350px] opacity-90"
            />
          </div>
        </motion.div>

        <div className="absolute bottom-4 left-4 md:left-8">
          <Link href="/departements/exploitation/rapports/incidents/liste">
            <Button 
              variant="outline" 
              className="bg-white/20 text-white hover:bg-white/30 border-white/30"
            >
              <ArrowLeft className="w-5 h-5 mr-2" />
              Retour à la liste d'incidents
            </Button>
          </Link>
        </div>
      </div>
    </div>
  )
}

export default function IncidentsPage() {
  const [formData, setFormData] = useState({
    unite: '',
    typeStructure: '',
    titre: '',
    wilaya: '',
    commune: '',
    localite: '',
    natureEtCause: '',
    dateHeure: '',
    niveauGravite: '',
    mesuresPrises: '',
    impact: ''
  })

  const [isSubmitting, setIsSubmitting] = useState(false)

  const handleSubmit = useCallback((e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    
    try {
      console.log('Submitting:', formData)
      alert('Incident enregistré avec succès')
    } catch (error) {
      alert('Erreur lors de l\'enregistrement')
    } finally {
      setIsSubmitting(false)
    }
  }, [formData])

  return (
    <div className="min-h-screen flex flex-col bg-gray-50 scrollbar-gutter-stable">
      <div className="fixed inset-0 overflow-y-scroll">
        <div className="relative min-h-full">
          <IncidentsBanner />
          
          <main className="relative w-full max-w-7xl mx-auto px-4 py-8">
            <form onSubmit={handleSubmit} className="space-y-8">
              <div className="bg-white shadow-sm rounded-lg p-6">
                <h3 className="text-lg font-semibold mb-6">Informations de base</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="unite">Unité *</Label>
                    <Select 
                      onValueChange={(value) => setFormData(prev => ({ ...prev, unite: value }))}
                    >
                      <SelectTrigger 
                        id="unite" 
                        className="w-full bg-white text-black"
                      >
                        <SelectValue 
                          placeholder="Sélectionner une unité" 
                          className="text-black"
                        />
                      </SelectTrigger>
                      <SelectContent 
                        position="popper"
                        className="w-[var(--radix-select-trigger-width)]"
                        align="start"
                        side="bottom"
                        avoidCollisions={false}
                      >
                        <SelectItem value="unite1">Unité 1</SelectItem>
                        <SelectItem value="unite2">Unité 2</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2 relative">
                    <Label htmlFor="typeStructure">Type de Structure *</Label>
                    <Select 
                      onValueChange={(value) => setFormData(prev => ({ ...prev, typeStructure: value }))}
                    >
                      <SelectTrigger 
                        id="typeStructure" 
                        className="w-full bg-white text-black"
                      >
                        <SelectValue 
                          placeholder="Sélectionner le type" 
                          className="text-black"
                        />
                      </SelectTrigger>
                      <SelectContent 
                        position="popper"
                        className="w-[var(--radix-select-trigger-width)]"
                        align="start"
                        side="bottom"
                        avoidCollisions={false}
                      >
                        <SelectItem value="type1">Type 1</SelectItem>
                        <SelectItem value="type2">Type 2</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="md:col-span-2 space-y-2">
                    <Label htmlFor="titre">Titre de l'incident *</Label>
                    <Input
                      id="titre"
                      placeholder="Entrer le titre"
                      className="w-full bg-white text-black"
                      onChange={(e) => setFormData(prev => ({ ...prev, titre: e.target.value }))}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="wilaya">Wilaya *</Label>
                    <Input
                      id="wilaya"
                      placeholder="Entrer la wilaya"
                      className="w-full bg-white text-black"
                      onChange={(e) => setFormData(prev => ({ ...prev, wilaya: e.target.value }))}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="commune">Commune *</Label>
                    <Input
                      id="commune"
                      placeholder="Entrer la commune"
                      className="w-full bg-white text-black"
                      onChange={(e) => setFormData(prev => ({ ...prev, commune: e.target.value }))}
                    />
                  </div>

                  <div className="md:col-span-2 space-y-2">
                    <Label htmlFor="localite">Localité *</Label>
                    <Input
                      id="localite"
                      placeholder="Entrer la localité"
                      className="w-full bg-white text-black"
                      onChange={(e) => setFormData(prev => ({ ...prev, localite: e.target.value }))}
                    />
                  </div>

                  <div className="md:col-span-2 space-y-2">
                    <Label htmlFor="natureEtCause">Nature et Cause</Label>
                    <Textarea
                      id="natureEtCause"
                      placeholder="Décrire la nature et la cause de l'incident"
                      className="w-full bg-white text-black min-h-[100px]"
                      onChange={(e) => setFormData(prev => ({ ...prev, natureEtCause: e.target.value }))}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="dateHeure">Date et Heure *</Label>
                    <Input
                      id="dateHeure"
                      type="datetime-local"
                      className="w-full bg-white text-black"
                      onChange={(e) => setFormData(prev => ({ ...prev, dateHeure: e.target.value }))}
                    />
                  </div>

                  <div className="space-y-2 relative">
                    <Label htmlFor="niveauGravite">Niveau de Gravité *</Label>
                    <Select 
                      onValueChange={(value) => setFormData(prev => ({ ...prev, niveauGravite: value }))}
                    >
                      <SelectTrigger 
                        id="niveauGravite" 
                        className="w-full bg-white text-black"
                      >
                        <SelectValue 
                          placeholder="Sélectionner le niveau" 
                          className="text-black"
                        />
                      </SelectTrigger>
                      <SelectContent 
                        position="popper"
                        className="w-[var(--radix-select-trigger-width)]"
                        align="start"
                        side="bottom"
                        avoidCollisions={false}
                      >
                        <SelectItem value="faible">Faible</SelectItem>
                        <SelectItem value="moyen">Moyen</SelectItem>
                        <SelectItem value="eleve">Élevé</SelectItem>
                        <SelectItem value="critique">Critique</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="md:col-span-2 space-y-2">
                    <Label htmlFor="mesuresPrises">Mesures Prises</Label>
                    <Textarea
                      id="mesuresPrises"
                      placeholder="Décrire les mesures prises"
                      className="w-full bg-white text-black min-h-[100px]"
                      onChange={(e) => setFormData(prev => ({ ...prev, mesuresPrises: e.target.value }))}
                    />
                  </div>

                  <div className="md:col-span-2 space-y-2">
                    <Label htmlFor="impact">Impact</Label>
                    <Textarea
                      id="impact"
                      placeholder="Décrire l'impact de l'incident"
                      className="w-full bg-white text-black min-h-[100px]"
                      onChange={(e) => setFormData(prev => ({ ...prev, impact: e.target.value }))}
                    />
                  </div>
                </div>
              </div>
            </form>
          </main>

          <div className="fixed bottom-6 right-6 z-50">
            <Button
              onClick={handleSubmit}
              disabled={isSubmitting}
              className="rounded-full h-16 px-10 text-lg font-semibold shadow-2xl transition-all duration-300 ease-in-out transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center text-white"
              style={{
                background: 'linear-gradient(145deg, #356ee7, #173aaa)',
                boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)'
              }}
            >
              {isSubmitting ? (
                <span className="flex items-center">
                  <svg className="animate-spin -ml-1 mr-3 h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Enregistrement...
                </span>
              ) : (
                <>
                  <Save className="w-6 h-6 mr-3" />
                  Enregistrer l'incident
                </>
              )}
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}
