'use client'

import React, { useState, useCallback } from 'react'
import { motion } from 'framer-motion'
import { ArrowLeft, FileText, Save } from 'lucide-react'
import Link from 'next/link'
import Image from 'next/image'
import { Button } from "@/components/ui/radix-button"
import { 
  Form, 
  FormField, 
  FormLabel, 
  FormControl, 
  FormMessage 
} from "@/components/radix/form"

function IncidentsBanner() {
  return (
    <div className="w-full bg-gradient-to-br from-[#4a90e2] to-[#1a237e] text-white">
      <div className="relative px-4 py-16 md:px-8 md:py-20 max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="flex flex-col md:flex-row items-center justify-between"
        >
          <div className="text-center md:text-left mb-8 md:mb-0">
            <h2 className="text-4xl md:text-5xl font-black mb-4 bg-clip-text text-transparent bg-gradient-to-r from-white to-white/70 drop-shadow-lg">
              Signaler un Incident
            </h2>
            <div className="flex items-center justify-center md:justify-start space-x-4 text-white/80">
              <FileText className="w-6 h-6 opacity-70" />
              <p className="text-xl font-black tracking-wide">
                Rapport Détaillé d'Incident
              </p>
            </div>
          </div>
          
          <div className="hidden md:block">
            <Image 
              src="/images/onalogos/sparkLogofull.png" 
              alt="ONA Spark Logo" 
              width={350} 
              height={120} 
              className="max-w-[350px] opacity-90"
            />
          </div>
        </motion.div>

        <div className="absolute bottom-4 left-4 md:left-8">
          <Link href="/departements/exploitation/rapports/incidents/liste">
            <Button 
              variant="outline" 
              className="bg-white/20 text-white hover:bg-white/30 border-white/30"
            >
              <ArrowLeft className="w-5 h-5 mr-2" />
              Retour à la liste d'incidents
            </Button>
          </Link>
        </div>
      </div>
    </div>
  )
}

export default function IncidentsPage() {
  const [formData, setFormData] = useState({
    unite: '',
    typeStructure: '',
    titre: '',
    wilaya: '',
    commune: '',
    localite: '',
    natureEtCause: '',
    dateHeure: '',
    niveauGravite: '',
    mesuresPrises: '',
    impact: ''
  })

  const [isSubmitting, setIsSubmitting] = useState(false)

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData(prev => ({ ...prev, [name]: value }))
  }

  const handleSubmit = useCallback((e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    
    try {
      console.log('Submitting:', formData)
      alert('Incident enregistré avec succès')
    } catch (error) {
      alert('Erreur lors de l\'enregistrement')
    } finally {
      setIsSubmitting(false)
    }
  }, [formData])

  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <IncidentsBanner />
      
      <div className="container mx-auto px-4 py-8">
        <Form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid md:grid-cols-2 gap-6">
            <FormField>
              <FormLabel htmlFor="unite">Unité</FormLabel>
              <FormControl 
                id="unite"
                name="unite"
                value={formData.unite}
                onChange={handleChange}
                placeholder="Sélectionnez l'unité"
                required
              />
              <FormMessage>Champ obligatoire</FormMessage>
            </FormField>

            <FormField>
              <FormLabel htmlFor="typeStructure">Type de Structure</FormLabel>
              <FormControl 
                id="typeStructure"
                name="typeStructure"
                value={formData.typeStructure}
                onChange={handleChange}
                placeholder="Type de structure"
                required
              />
              <FormMessage>Champ obligatoire</FormMessage>
            </FormField>
          </div>

          <div className="grid md:grid-cols-2 gap-6">
            <FormField>
              <FormLabel htmlFor="titre">Titre de l'Incident</FormLabel>
              <FormControl 
                id="titre"
                name="titre"
                value={formData.titre}
                onChange={handleChange}
                placeholder="Titre descriptif de l'incident"
                required
              />
              <FormMessage>Champ obligatoire</FormMessage>
            </FormField>

            <FormField>
              <FormLabel htmlFor="wilaya">Wilaya</FormLabel>
              <FormControl 
                id="wilaya"
                name="wilaya"
                value={formData.wilaya}
                onChange={handleChange}
                placeholder="Wilaya concernée"
                required
              />
              <FormMessage>Champ obligatoire</FormMessage>
            </FormField>
          </div>

          <div className="grid md:grid-cols-2 gap-6">
            <FormField>
              <FormLabel htmlFor="commune">Commune</FormLabel>
              <FormControl 
                id="commune"
                name="commune"
                value={formData.commune}
                onChange={handleChange}
                placeholder="Commune de l'incident"
                required
              />
              <FormMessage>Champ obligatoire</FormMessage>
            </FormField>

            <FormField>
              <FormLabel htmlFor="localite">Localité</FormLabel>
              <FormControl 
                id="localite"
                name="localite"
                value={formData.localite}
                onChange={handleChange}
                placeholder="Localité précise"
                required
              />
              <FormMessage>Champ obligatoire</FormMessage>
            </FormField>
          </div>

          <FormField>
            <FormLabel htmlFor="natureEtCause">Nature et Cause de l'Incident</FormLabel>
            <textarea 
              id="natureEtCause"
              name="natureEtCause"
              value={formData.natureEtCause}
              onChange={handleChange}
              placeholder="Description détaillée de l'incident"
              className="w-full rounded-md border border-input bg-background px-3 py-2 text-sm"
              rows={4}
              required
            />
            <FormMessage>Champ obligatoire</FormMessage>
          </FormField>

          <div className="grid md:grid-cols-2 gap-6">
            <FormField>
              <FormLabel htmlFor="dateHeure">Date et Heure</FormLabel>
              <FormControl 
                type="datetime-local"
                id="dateHeure"
                name="dateHeure"
                value={formData.dateHeure}
                onChange={handleChange}
                required
              />
              <FormMessage>Champ obligatoire</FormMessage>
            </FormField>

            <FormField>
              <FormLabel htmlFor="niveauGravite">Niveau de Gravité</FormLabel>
              <FormControl 
                id="niveauGravite"
                name="niveauGravite"
                value={formData.niveauGravite}
                onChange={handleChange}
                placeholder="Niveau de gravité de l'incident"
                required
              />
              <FormMessage>Champ obligatoire</FormMessage>
            </FormField>
          </div>

          <FormField>
            <FormLabel htmlFor="mesuresPrises">Mesures Prises</FormLabel>
            <textarea 
              id="mesuresPrises"
              name="mesuresPrises"
              value={formData.mesuresPrises}
              onChange={handleChange}
              placeholder="Détails des mesures immédiates prises"
              className="w-full rounded-md border border-input bg-background px-3 py-2 text-sm"
              rows={4}
              required
            />
            <FormMessage>Champ obligatoire</FormMessage>
          </FormField>

          <FormField>
            <FormLabel htmlFor="impact">Impact de l'Incident</FormLabel>
            <textarea 
              id="impact"
              name="impact"
              value={formData.impact}
              onChange={handleChange}
              placeholder="Évaluation de l'impact de l'incident"
              className="w-full rounded-md border border-input bg-background px-3 py-2 text-sm"
              rows={4}
              required
            />
            <FormMessage>Champ obligatoire</FormMessage>
          </FormField>

          <div className="flex justify-end space-x-4 mt-6">
            <Button 
              type="button" 
              variant="outline"
              onClick={() => window.history.back()}
            >
              Annuler
            </Button>
            <Button 
              type="submit" 
              disabled={isSubmitting}
            >
              {isSubmitting ? 'Envoi en cours...' : 'Soumettre l\'Incident'}
              <Save className="ml-2 h-4 w-4" />
            </Button>
          </div>
        </Form>
      </div>
    </div>
  )
}
